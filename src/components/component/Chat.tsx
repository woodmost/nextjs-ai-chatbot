"use client";

import React, { useEffect, useRef, useState } from "react";

import { useClerk, useUser } from "@clerk/clerk-react";
import { useChat } from "ai/react";

import Header from "@/components/component/Header";
import SideNavbar from "@/components/component/SideNavbar";
import SubscriptionDialog from "@/components/component/SubscriptionDialog";
import MessageCircleIcon from "@/components/icon/MessageCircleIcon";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useToast } from "@/components/ui/use-toast";
import { AddFreePoints } from "@/lib/actions";

/**
 * This code was generated by v0 by Vercel.
 */

const Chat = () => {
  const [open, setOpen] = useState(false);
  const { toast } = useToast();
  const { isSignedIn, user } = useUser();

  const points = user?.publicMetadata?.points;
  const hasNoPoints = typeof points === "number" && points === 0;
  const newUser = typeof points === "undefined";
  const paidUser = user?.publicMetadata?.stripeCustomerId;
  const enableSubscription =
    isSignedIn && hasNoPoints && (!paidUser || typeof paidUser !== "undefined");

  const { openSignIn, session } = useClerk();

  const { messages, input, isLoading, error, handleInputChange, handleSubmit } =
    useChat({
      initialMessages: [
        {
          id: "1",
          role: "system",
          content: "You are an assistant that gives short answers.",
        },
      ],
      onResponse: (response) => {
        if (!response.ok) {
          switch (response.status) {
            case 401:
              toast({
                variant: "destructive",
                description: "You need to sign in first.",
              });
              break;
            case 402:
              toast({
                variant: "destructive",
                description: "You run out of points.",
              });
              break;
            default:
              toast({
                variant: "destructive",
                description: "Something went wrong.",
              });
              break;
          }
        }
        session?.reload();
      },
    });

  const filteredMessages = messages.filter((message) => message.id !== "1");

  const messagesEndRef = useRef<null | HTMLDivElement>(null);

  const InitContent = () => {
    return (
      <h1 className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-2xl font-bold">
        <MessageCircleIcon className="mx-auto mb-4 w-8 h-8" />
        How can I help you today?
      </h1>
    );
  };

  const scrollToBottom = () => {
    if (messagesEndRef.current === null) return;
    messagesEndRef.current?.scrollTo(0, messagesEndRef.current.scrollHeight);
  };

  const handleRedeemFreePoints = async () => {
    const { error, message } = await AddFreePoints();
    if (error) {
      toast({
        variant: "destructive",
        description: message,
      });
      return;
    }
    toast({
      description: message,
    });

    session?.reload();
  };

  const handleSubscribe = () => {
    setOpen(true);
  };

  const submit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!isSignedIn) {
      openSignIn();
    } else {
      handleSubmit(e);
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  return (
    <>
      <div className="flex h-screen">
        <SideNavbar></SideNavbar>
        <div className="flex flex-col flex-1">
          <div className="flex flex-col h-screen">
            <Header>
              <div className="flex items-center space-x-4">
                {isSignedIn && (
                  <Button variant="ghost" className="font-bold">
                    Point : <>{points || 0}</>
                  </Button>
                )}
                {isSignedIn && newUser && (
                  <Button onClick={handleRedeemFreePoints}>Free Trial</Button>
                )}

                {enableSubscription && (
                  <Button onClick={handleSubscribe}>Subscribe</Button>
                )}
              </div>
            </Header>

            <ScrollArea
              className="relative w-5/6 lg:w-1/2 flex-1 my-6 mx-auto"
              ref={messagesEndRef}
            >
              {!error && !isSignedIn && <InitContent></InitContent>}
              <ul>
                {filteredMessages.map((m, index) => (
                  <li className="p-4 flex gap-3" key={index}>
                    <h3 className="text-sm font-bold">
                      <Avatar>
                        <AvatarFallback
                          className={
                            m.role === "user" ? "" : "bg-black text-white"
                          }
                        >
                          {m.role === "user" ? "You" : "AI"}
                        </AvatarFallback>
                      </Avatar>
                    </h3>
                    <p className="text-md mt-2">{m.content}</p>
                  </li>
                ))}
              </ul>
            </ScrollArea>
            <div className="w-5/6 lg:w-1/2 mx-auto mb-6 h-auto">
              <form className="flex gap-4" onSubmit={submit}>
                <div className="flex-1">
                  <Input
                    value={input}
                    onChange={handleInputChange}
                    placeholder="Type your message..."
                  />
                </div>
                <Button variant={"outline"} disabled={isLoading}>
                  Send
                </Button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <SubscriptionDialog open={open} onOpenChange={setOpen} />
    </>
  );
};

export default Chat;
