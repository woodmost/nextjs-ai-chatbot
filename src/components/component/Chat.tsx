"use client";

import Link from "next/link";

import React, { useEffect, useRef } from "react";

import { useChat } from "ai/react";

import SideNavbar from "@/components/component/SideNavbar";
import MessageCircleIcon from "@/components/icon/MessageCircleIcon";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";

/**
 * This code was generated by v0 by Vercel.
 */

const Chat = () => {
  const { messages, input, isLoading, error, handleInputChange, handleSubmit } =
    useChat({
      initialMessages: [
        {
          id: Date.now().toString(),
          role: "system",
          content: "You are an assistant that gives short answers.",
        },
      ],
    });
  const messagesEndRef = useRef<null | HTMLDivElement>(null);

  const ErrorContent = () => {
    return (
      <p className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-2xl font-bold">
        Something went wrong.
      </p>
    );
  };

  const InitContent = () => {
    return (
      <h1 className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-2xl font-bold">
        <MessageCircleIcon className="mx-auto mb-4 w-8 h-8" />
        How can I help you today?
      </h1>
    );
  };

  const scrollToBottom = () => {
    if (messagesEndRef.current === null) return;
    messagesEndRef.current?.scrollTo(0, messagesEndRef.current.scrollHeight);
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  return (
    <div className="flex h-screen">
      <SideNavbar></SideNavbar>
      <div className="flex flex-col flex-1">
        <div className="flex flex-col h-screen">
          <header className="flex h-14 items-center gap-4 border-b px-6 dark:bg-gray-800/40 lg:h-[60px]">
            <Link className="lg:hidden" href="#">
              <span className="sr-only">Home</span>
            </Link>
            <div className="flex-1">
              <h1 className="text-lg font-semibold">Dashboard</h1>
            </div>
          </header>
          <ScrollArea
            className="relative w-5/6 lg:w-1/2 flex-1 my-6 mx-auto"
            ref={messagesEndRef}
          >
            {error && <ErrorContent></ErrorContent>}
            {!error && messages.length === 1 && <InitContent></InitContent>}
            {!error && messages.length > 1 && (
              <ul>
                {messages.map((m, index) => (
                  <li className="p-4 flex gap-3" key={index}>
                    <h3 className="text-sm font-bold">
                      <Avatar>
                        <AvatarFallback
                          className={
                            m.role === "user" ? "" : "bg-black text-white"
                          }
                        >
                          {m.role === "user" ? "You" : "AI"}
                        </AvatarFallback>
                      </Avatar>
                    </h3>
                    <p className="text-md mt-2">{m.content}</p>
                  </li>
                ))}
              </ul>
            )}
          </ScrollArea>
          <div className="w-5/6 lg:w-1/2 mx-auto mb-6 h-auto">
            <form className="flex gap-4" onSubmit={handleSubmit}>
              <div className="flex-1">
                <Input
                  value={input}
                  onChange={handleInputChange}
                  placeholder="Type your message..."
                />
              </div>
              <Button variant={"outline"} disabled={isLoading}>
                Send
              </Button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chat;
